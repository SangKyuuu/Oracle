/*
25/07/21
최상규
SQL 연습문제2
*/

//2-2
CREATE TABLE student(
    stdNo CHAR(8) PRIMARY KEY NOT NULL ,
    name  VARCHAR2(20) NOT NULL,
    birth DATE NOT NULL,
    major VARCHAR2(20) DEFAULT NULL,
    ENR_DATE DATE
);

CREATE TABLE course(
    CS_ID NUMBER(4) NOT NULL,
    CS_NAME VARCHAR2(20) NOT NULL,
    CS_Credit NUMBER(1) NOT NULL,
    CS_DEPT VARCHAR2(20) NOT NULL
);
/

CREATE TABLE enrollment(
    ENR_NO NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ENR_STDNO NUMBER(8) NOT NULL,
    ENR_CSID NUMBER(4) DEFAULT NULL,
    MID_SCORE NUMBER DEFAULT NULL,
    FINAL_SCORE NUMBER DEFAULT NULL,
    TOTAL_SCORE NUMBER DEFAULT NULL,
    GRADE CHAR(1) DEFAULT NULL
);
/

//2-3
INSERT INTO STUDENT VALUES('20121016', '김유신', '1991-01-13', '국문학과','2012-02-01');
INSERT INTO STUDENT VALUES('20111126', '김춘추', '1992-04-11', '경제학과','2011-02-01');
INSERT INTO STUDENT VALUES('20100216', '장보고', '1991-05-23', '컴퓨터학과','2010-02-01');
INSERT INTO STUDENT VALUES('20120326', '강감찬', '1991-02-09', '영문학과','2012-02-01');
INSERT INTO STUDENT VALUES('20130416', '이순신', '1992-11-30', '경영학과','2012-02-01');
INSERT INTO STUDENT VALUES('20110521', '송상현', '1992-07-17', '컴퓨터학과','2011-02-01');

INSERT INTO COURSE VALUES(1059,'고전문학',3,'국문학과');
INSERT INTO COURSE VALUES(2312,'데이터베이스',3,'컴퓨터학과');
INSERT INTO COURSE VALUES(1203,'Easy Writing',3,'영문학과');
INSERT INTO COURSE VALUES(2039,'글로벌경제학',3,'경제학과');
INSERT INTO COURSE VALUES(2301,'프로그래밍언어',3,'컴퓨터학과');
INSERT INTO COURSE VALUES(2303,'컴퓨터과학 개론',2,'컴퓨터학과');
INSERT INTO COURSE VALUES(3012,'마케팅 전략',2,'경영학과');

INSERT INTO enrollment(ENR_STDNO,ENR_CSID) VALUES(20111126,1203);
INSERT INTO enrollment(ENR_STDNO,ENR_CSID) VALUES(20121016,2301);
INSERT INTO enrollment(ENR_STDNO,ENR_CSID) VALUES(20121016,2303);
INSERT INTO enrollment(ENR_STDNO,ENR_CSID) VALUES(20111126,2039);
INSERT INTO enrollment(ENR_STDNO,ENR_CSID) VALUES(20100216,3012);
INSERT INTO enrollment(ENR_STDNO,ENR_CSID) VALUES(20120326,3012);
INSERT INTO enrollment(ENR_STDNO,ENR_CSID) VALUES(20121016,2312);
INSERT INTO enrollment(ENR_STDNO,ENR_CSID) VALUES(20130416,3012);

//2-4
SELECT * FROM STUDENT WHERE MAJOR = '컴퓨터학과';

//2-5
SELECT * FROM COURSE WHERE CS_DEPT = '컴퓨터학과';

//2-6
SELECT * FROM ENROLLMENT WHERE ENR_STDNO = 20121016;

//2-7
SELECT NAME, MAJOR, ENR_DATE FROM STUDENT WHERE MAJOR = '국문학과';

//2-8
SELECT * FROM COURSE WHERE CS_CREDIT = 2 AND CS_DEPT = '컴퓨터학과';

//2-9
SELECT STDNO, NAME, BIRTH FROM STUDENT WHERE BIRTH >= '1992-01-01';

//2-10
UPDATE ENROLLMENT SET MID_SCORE = 36, FINAL_SCORE= 42 WHERE ENR_STDNO='20111126' AND ENR_CSID=1203;
UPDATE ENROLLMENT SET MID_SCORE = 24, FINAL_SCORE= 62 WHERE ENR_STDNO='20121016' AND ENR_CSID=2301;
UPDATE ENROLLMENT SET MID_SCORE = 28, FINAL_SCORE= 40 WHERE ENR_STDNO='20121016' AND ENR_CSID=2303;
UPDATE ENROLLMENT SET MID_SCORE = 37, FINAL_SCORE= 57 WHERE ENR_STDNO='20111126' AND ENR_CSID=2039;
UPDATE ENROLLMENT SET MID_SCORE = 28, FINAL_SCORE= 68 WHERE ENR_STDNO='20100216' AND ENR_CSID=3012;
UPDATE ENROLLMENT SET MID_SCORE = 16, FINAL_SCORE= 65 WHERE ENR_STDNO='20120326' AND ENR_CSID=3012;
UPDATE ENROLLMENT SET MID_SCORE = 18, FINAL_SCORE= 38 WHERE ENR_STDNO='20121016' AND ENR_CSID=2312;
UPDATE ENROLLMENT SET MID_SCORE = 25, FINAL_SCORE= 58 WHERE ENR_STDNO='20130416' AND ENR_CSID=3012;
SELECT * FROM ENROLLMENT;

//2-11
UPDATE ENROLLMENT 
SET 
TOTAL_SCORE = MID_SCORE + FINAL_SCORE,
GRADE = CASE
WHEN (MID_SCORE + FINAL_SCORE) >= 90 THEN 'A'
WHEN (MID_SCORE + FINAL_SCORE) >= 80 THEN 'B'
WHEN (MID_SCORE + FINAL_SCORE) >= 70 THEN 'C'
WHEN (MID_SCORE + FINAL_SCORE) >= 60 THEN 'D'
ELSE 'F'
END;
SELECT * FROM ENROLLMENT;

//2-12
SELECT * FROM ENROLLMENT ORDER BY TOTAL_SCORE DESC;

//2-13
SELECT * FROM ENROLLMENT WHERE ENR_CSID = 3012 ORDER BY TOTAL_SCORE DESC;

//2-14
SELECT CS_ID, CS_NAME FROM COURSE WHERE CS_NAME IN ('데이터베이스','프로그래밍언어');

//2-15
SELECT CS_NAME, CS_DEPT FROM COURSE;

//2-16
SELECT STDNO,NAME FROM STUDENT ORDER BY NAME;

//2-17
SELECT DISTINCT ENR_STDNO FROM ENROLLMENT;

//2-18
SELECT MAX(TOTAL_SCORE) AS "가장_큰_총점" FROM ENROLLMENT;

//2-19
SELECT MAJOR,COUNT(*) "학생수" FROM STUDENT GROUP BY MAJOR;

//2-20
SELECT ENR_CSID, COUNT(*) "학생수" FROM ENROLLMENT GROUP BY ENR_CSID HAVING COUNT(*) >= 2;

//2-21
SELECT STDNO,NAME,MAJOR,ENR_CSID,MID_SCORE,FINAL_SCORE,TOTAL_SCORE,GRADE
FROM Student S
LEFT JOIN ENROLLMENT E ON S.STDNO = E.ENR_STDNO;

//2-22
SELECT Name, stdNo, ENR_CSID
FROM Student S
JOIN ENROLLMENT E ON S.STDNO = E.ENR_STDNO
WHERE E.ENR_CSID = 3012;

//2-23
SELECT stdNo,Name,
    COUNT(stdNo) AS "수강신청 건수",
    SUM(Total_Score) AS "종합점수",
    SUM(Total_Score) / COUNT(stdNo) AS "평균"
FROM Student S
JOIN ENROLLMENT E ON S.stdNo = E.ENR_STDNO
GROUP BY stdNo, name 
order by 1;

//2-24
SELECT ENR_NO, ENR_STDNO,CS_ID,CS_NAME,CS_CREDIT 
FROM ENROLLMENT E
JOIN COURSE C ON E.ENR_CSID = C.CS_ID;

//2-25
SELECT COUNT(*) AS 마케팅_전략_수강_신청건수,
    AVG(TOTAL_SCORE) AS 마케팅_전략_평균
FROM Enrollment E
JOIN COURSE C ON E.ENR_CSID = C.CS_ID
WHERE CS_ID = 3012;

//2-26
SELECT ENR_STDNO, CS_NAME
FROM ENROLLMENT E
JOIN COURSE C ON E.ENR_CSID = C.CS_ID
WHERE GRADE = 'A';

//2-27
SELECT
    STDNO,
    NAME,
    MAJOR,
    ENR_CSID,
    CS_NAME,
    CS_CREDIT,
    TOTAL_SCORE,
    GRADE
FROM Student S
JOIN ENROLLMENT E ON S.STDNO = E.ENR_STDNO
JOIN COURSE C ON E.ENR_CSID = C.CS_ID

//2-28
SELECT
    stdNo,
    Name,
    CS_Name,
    TOTAL_SCORE,
    Grade
FROM Student S
JOIN ENROLLMENT E ON S.STDNO = E.ENR_STDNO
JOIN COURSE C ON E.ENR_CSID = C.CS_ID
WHERE GRADE = 'F';

//2-29
SELECT
    stdNo,
    Name,
    SUM(CS_Credit) AS 이수학점
FROM Student S
JOIN ENROLLMENT E ON S.STDNO = E.ENR_STDNO
JOIN COURSE C ON E.ENR_CSID = C.CS_ID
WHERE GRADE <> 'F'
GROUP BY STDNO, NAME;

//2-30
SELECT
    S.STDNO,
    S.NAME,
    S.MAJOR
FROM STUDENT S
WHERE S.STDNO NOT IN (
    SELECT ENR_STDNO FROM ENROLLMENT
);